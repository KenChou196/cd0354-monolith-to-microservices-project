# Assuming the .travis.yml file is in the project directory, and there is a separate sub-directory for each service
# Use either `docker-compose` or individual `docker build` commands

language: node_js
# node js version 12.22.12
node_js:
  - 12

services:
  - docker

# Pre-testing installs
install:
  - echo "nothing needs to be installed"
# Copy this from exercise example
# Scripts to be run such as tests
before_script:
  - echo "no tests"

script:
  # Build
  - docker build -t udagram-api-feed ./udagram-api-feed
  # ===start===
  - docker build -t udagram-api-user ./udagram-api-user
  - docker build -t udagram-frontend ./udagram-frontend
  - docker build -t udagram-reverseproxy ./udagram-reverseproxy
  # Tagging
  - docker tag udagram-api-feed kynkdev/udagram-api-feed:latest
  # ===start===
  - docker tag udagram-api-user kynkdev/udagram-api-user:latest
  - docker tag udagram-frontend kynkdev/udagram-frontend:latest
  - docker tag udagram-reverseproxy kynkdev/udagram-reverseproxy:latest

after_success:
  # Push
  # Assuming DOCKER_PASSWORD and DOCKER_USERNAME are set in the Travis repository settings
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  # ===start===
  - docker push kynkdev/udagram-api-feed
  - docker push kynkdev/udagram-api-user
  - docker push kynkdev/udagram-frontend
  - docker push kynkdev/udagram-reverseproxy
# Tasks to perform after the process is successful. Formatting the Docker username and password as below enables you to programmatically log in without having the password exposed in logs.